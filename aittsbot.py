import os
import asyncio
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext
from TTS.api import TTS
import concurrent.futures
import gc
from queue import Queue
from config import load_config
# from collections import deque  # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è RateLimiter

# –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å psutil –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
try:
    import psutil
    HAS_PSUTIL = True
except ImportError:
    HAS_PSUTIL = False
    print("psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = load_config()

class AudioTask:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ"""
    def __init__(self, text, update, status_message=None, created_at=None):
        self.text = text
        self.update = update
        self.status_message = status_message
        self.created_at = created_at or datetime.now()

# class RateLimiter:
#     """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
#     def __init__(self, max_requests: int, period: timedelta):
#         self.max_requests = max_requests
#         self.period = period
#         self.requests = deque()
#
#     def allow(self) -> bool:
#         now = datetime.now()
#         while self.requests and now - self.requests[0] > self.period:
#             self.requests.popleft()
#         if len(self.requests) < self.max_requests:
#             self.requests.append(now)
#             return True
#         return False

class BotManager:
    def __init__(self):
        self.is_processing = False
        self.tts = None
        self.executor = concurrent.futures.ThreadPoolExecutor(max_workers=1)
        self.tasks_queue = Queue(maxsize=config.max_queue_size)
        self.queue_processor_running = False
        self.memory_usage_cache = {"value": None, "timestamp": None}
        self.current_task = None
        # self.rate_limiter = RateLimiter(max_requests=10, period=timedelta(seconds=1))

    def initialize_tts(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ TTS –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        try:
            print("–ó–∞–≥—Ä—É–∑–∫–∞ TTS –º–æ–¥–µ–ª–∏ –¥–ª—è CPU...")
            
            if not os.path.exists(config.path_default_sempl_voice):
                print(f"–û–®–ò–ë–ö–ê: –§–∞–π–ª —Å –≥–æ–ª–æ—Å–æ–º {config.path_default_sempl_voice} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                raise FileNotFoundError(f"–§–∞–π–ª —Å –≥–æ–ª–æ—Å–æ–º {config.path_default_sempl_voice} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            gc.collect()
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TTS
            self.tts = TTS(
                model_name="tts_models/multilingual/multi-dataset/xtts_v2",
                progress_bar=False,
                gpu=False
            )
            
            print("TTS –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TTS: {e}")
            raise e

    def generate_audio(self, text: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞"""
        try:
            os.makedirs("temp_audio", exist_ok=True)
            filename = os.path.join("temp_audio", f"audio_{datetime.now().strftime('%Y%m%d%H%M%S')}.wav")
            
            if len(text) > config.max_text_length:
                text = text[:config.max_text_length]
            
            text = text.replace('\n', ' ').replace('\r', ' ')
            
            print(f"–ù–∞—á–∞–ª–æ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {text[:50]}...")
            
            self.tts.tts_to_file(
                text=text,
                file_path=filename,
                speaker_wav=config.path_default_sempl_voice,
                language="ru"
            )
            
            if not os.path.exists(filename) or os.path.getsize(filename) == 0:
                print(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {filename} –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π")
                return None
            
            return filename
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
            import traceback
            traceback.print_exc()
            return None

    async def gen_command(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /gen"""
        # –£–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ rate limiting –∏–∑ –¥–æ–∫—Å—Ç—Ä–∏–Ω–≥–∏
        
        # if not self.rate_limiter.allow():
        #     await update.message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        #     return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
        if not context.args or len(" ".join(context.args)) < config.min_text_length:
            await update.message.reply_text(f"üìù –ú–∏–Ω–∏–º—É–º {config.min_text_length} —Å–∏–º–≤–æ–ª–∞")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ—á–µ—Ä–µ–¥–∏
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã: –∑–∞–¥–∞–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏ + —Ç–µ–∫—É—â–µ–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–µ
        total_slots_used = self.tasks_queue.qsize() + (1 if self.is_processing else 0)
        
        if total_slots_used >= config.max_queue_size:
            await update.message.reply_text(
                f"üî¥ –û—á–µ—Ä–µ–¥—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ (–º–∞–∫—Å–∏–º—É–º {config.max_queue_size} –∑–∞–¥–∞–Ω–∏–π). "
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏."
            )
            return

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –æ–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –î–û –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        user_text = " ".join(context.args)
        
        # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
        original_length = len(user_text)
        if original_length > config.max_text_length:
            user_text = user_text[:config.max_text_length]
            # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ–±—Ä–µ–∑–∫–µ —Ç–µ–∫—Å—Ç–∞
            await update.message.reply_text(
                f"‚ö†Ô∏è –í–∞—à —Ç–µ–∫—Å—Ç –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω —Å {original_length} –¥–æ {config.max_text_length} —Å–∏–º–≤–æ–ª–æ–≤."
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é, —É—á–∏—Ç—ã–≤–∞—è —Ç–µ–∫—É—â–∏–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–π —Ñ–∞–π–ª –∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏
        queue_size = self.tasks_queue.qsize()
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é: –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–µ –∑–∞–¥–∞–Ω–∏–µ, —Ç–æ +1 –∫ –ø–æ–∑–∏—Ü–∏–∏
        real_position = queue_size + 1 + (1 if self.is_processing else 0)

        status_message = await update.message.reply_text(
            f"‚è≥ –ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å. –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {real_position}."
        )
        
        # –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
        task = AudioTask(text=user_text, update=update, status_message=status_message)
        self.tasks_queue.put(task)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
        if not self.queue_processor_running:
            asyncio.create_task(self.process_queue())

    async def process_queue(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞–Ω–∏–π —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        self.queue_processor_running = True
        self.current_task = None  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
        
        while not self.tasks_queue.empty():
            task = None
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                task = self.tasks_queue.get()
                self.current_task = task  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç—É—Å–µ
                
                # –ó–∞–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                # start_time = datetime.now()
                # print(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞–Ω–∏—è –≤ {start_time.strftime('%H:%M:%S.%f')}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
                if task.status_message:
                    await task.status_message.edit_text("‚è≥ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞...")
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
                self.is_processing = True
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π event loop
                loop = asyncio.get_running_loop()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                future = self.executor.submit(self.generate_audio, task.text)
                
                # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –º–µ–Ω—å—à–µ–π —á–∞—Å—Ç–æ—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–æ–∫
                # –ù–∞ CPU –æ–ø–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–ª–≥–æ–π, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
                while not future.done():
                    await asyncio.sleep(1.0)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 1 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ CPU
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                audio_path = future.result()
                
                # –ó–∞–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏
                # gen_complete_time = datetime.now()
                # print(f"–í—Ä–µ–º—è –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏: {(gen_complete_time - start_time).total_seconds():.2f} —Å–µ–∫")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                await self.handle_audio_generated(task.update, audio_path, task.status_message)
                
                # –ó–∞–º–µ—Ä—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è
                # end_time = datetime.now()
                # print(f"–û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞–Ω–∏—è: {(end_time - start_time).total_seconds():.2f} —Å–µ–∫")
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {e}")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è task, –µ—Å–ª–∏ –æ–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ
                try:
                    if task and task.status_message:
                        await task.status_message.edit_text("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞–Ω–∏—è.")
                    elif task:
                        await task.update.message.reply_text("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞–Ω–∏—è.")
                except Exception as notify_error:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ: {notify_error}")
            
            finally:
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –∏ —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
                self.is_processing = False
                self.current_task = None
                
                # –ï—Å–ª–∏ task –±—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–æ, –æ—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
                if task is not None:
                    self.tasks_queue.task_done()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–¥–∞–Ω–∏–π
                # –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –≤ —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ
                remaining_tasks = list(self.tasks_queue.queue)
                
                # –í–∞–∂–Ω–æ! –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π
                # –≠—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏ + 1 (–µ—Å–ª–∏ –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞)
                total_tasks = len(remaining_tasks) + (1 if self.is_processing else 0)
                
                for idx, queued_task in enumerate(remaining_tasks):
                    if queued_task.status_message:
                        try:
                            # –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: –∏–Ω–¥–µ–∫—Å + 1 (–¥–ª—è 1-indexed —Å—á–µ—Ç–∞) + 1 (–µ—Å–ª–∏ –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞)
                            position = idx + 1 + (1 if self.is_processing else 0)
                            
                            await queued_task.status_message.edit_text(
                                f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏. –ü–æ–∑–∏—Ü–∏—è: {position} –∏–∑ {total_tasks}."
                            )
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        self.queue_processor_running = False

    async def handle_audio_generated(self, update: Update, audio_path: str, status_message=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞"""
        try:
            if audio_path:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                if status_message:
                    await status_message.edit_text("‚úÖ –ê—É–¥–∏–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è—é...")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ (—Ñ–∞–π–ª –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –≤–Ω—É—Ç—Ä–∏ send_audio)
                await self.send_audio(update, audio_path)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
                if status_message:
                    await status_message.edit_text("‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            else:
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                if status_message:
                    await status_message.edit_text("üö´ –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞.")
                else:
                    await update.message.reply_text("üö´ –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ: {e}")
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
            if status_message:
                await status_message.edit_text("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ.")
            else:
                await update.message.reply_text("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ.")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
            if audio_path and os.path.exists(audio_path):
                try:
                    os.remove(audio_path)
                    print(f"–§–∞–π–ª {audio_path} —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏")
                except Exception as del_error:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {audio_path} –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: {del_error}")
        finally:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
            self.is_processing = False

    async def send_audio(self, update: Update, audio_path: str):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(3):  # –ü—Ä–æ—Å—Ç–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞ –¥–æ 3 —Ä–∞–∑
            try:
                if not os.path.exists(audio_path):
                    await update.message.reply_text("üö´ –§–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return
                
                with open(audio_path, 'rb') as audio_file:
                    await update.message.reply_audio(audio=audio_file)
                return  # –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ - –≤—ã—Ö–æ–¥–∏–º
            except Exception as e:
                if attempt == 2:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                    await update.message.reply_text("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª.")
                else:
                    await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
            finally:
                if os.path.exists(audio_path):
                    os.remove(audio_path)

    def get_memory_usage(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑ –≤ 10 —Å–µ–∫—É–Ω–¥)"""
        if not HAS_PSUTIL:
            return None
            
        now = datetime.now()
        
        # –ï—Å–ª–∏ –∫—ç—à —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if (self.memory_usage_cache["timestamp"] is None or
                (now - self.memory_usage_cache["timestamp"]).total_seconds() > 10):
            try:
                process = psutil.Process(os.getpid())
                memory = process.memory_info().rss / 1024 / 1024  # –≤ –ú–ë
                self.memory_usage_cache = {
                    "value": memory,
                    "timestamp": now
                }
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏: {e}")
                return None
                
        return self.memory_usage_cache["value"]

    async def status_command(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏"""
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ –∏ –≤—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤
        queue_size = self.tasks_queue.qsize()
        total_slots_used = queue_size + (1 if self.is_processing else 0)
        remaining_slots = config.max_queue_size - total_slots_used
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã
        status_lines = [
            "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:\n",
            f"{'üü¢ –°–≤–æ–±–æ–¥–µ–Ω' if not self.is_processing else 'üü° –í –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'}"
        ]
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–∞—Ö –æ—á–µ—Ä–µ–¥–∏
        status_lines.append(f"üìã –°–ª–æ—Ç—ã –æ—á–µ—Ä–µ–¥–∏: {total_slots_used} –∏–∑ {config.max_queue_size} (—Å–≤–æ–±–æ–¥–Ω–æ: {remaining_slots})")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        queue_items = list(self.tasks_queue.queue)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ
        if self.is_processing and self.current_task:
            status_lines.append(f"üîÑ –°–µ–π—á–∞—Å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è: –∑–∞–ø—Ä–æ—Å –æ—Ç {self.current_task.update.effective_user.first_name} "
                               f"(–¥–æ–±–∞–≤–ª–µ–Ω {self.current_task.created_at.strftime('%H:%M:%S')})")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏
        if queue_items:
            status_lines.append(f"üìã –ó–∞–¥–∞–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏ ({len(queue_items)}):")
            for i, task in enumerate(queue_items, start=1):
                status_lines.append(
                    f"   {i}. ‚è≥ –í –æ—á–µ—Ä–µ–¥–∏: –∑–∞–ø—Ä–æ—Å –æ—Ç {task.update.effective_user.first_name} "
                    f"(–¥–æ–±–∞–≤–ª–µ–Ω {task.created_at.strftime('%H:%M:%S')})"
                )
        else:
            status_lines.append("üìã –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏
        memory_usage = self.get_memory_usage()
        if memory_usage is not None:
            status_lines.append(f"üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_usage:.1f} –ú–ë")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_message = "\n".join(status_lines)
        await update.message.reply_text(status_message)

    async def start_command(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–µ –∏ –æ—á–µ—Ä–µ–¥–∏"""
        queue_info = self._get_queue_status_text()
        
        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}!\n\n"
            "üéô –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ —Å –≥–æ–ª–æ—Å–æ–º –ü—É—Ç–∏–Ω–∞.\n\n"
            "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
            "- –û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /gen —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞\n"
            "- –ò—Å–ø–æ–ª—å–∑—É–π /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã\n\n"
            "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n"
            f"- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {config.min_text_length} —Å–∏–º–≤–æ–ª–∞\n"
            f"- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {config.max_text_length} —Å–∏–º–≤–æ–ª–æ–≤\n"
            f"- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏: {config.max_queue_size}\n\n"
            "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏:\n"
            f"{queue_info}"
        )
        
        await update.message.reply_text(welcome_text)

    async def error_handler(self, update: Update, context: CallbackContext):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º —Å–Ω—è—Ç–∏–µ–º —Ñ–ª–∞–≥–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏"""
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")
        
        error_message = "üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
        if update and update.message:
            await update.message.reply_text(f"{error_message} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ
        self.is_processing = False
        
        # –¢–∞–∫–∂–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
        # –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
        if not self.tasks_queue.empty() and not self.queue_processor_running:
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏
            asyncio.create_task(self.process_queue())

    def cleanup_old_files(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            if os.path.exists("temp_audio"):
                files = os.listdir("temp_audio")
                if not files:
                    return  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞, –±—ã—Å—Ç—Ä—ã–π –≤—ã—Ö–æ–¥
                    
                for filename in files:
                    file_path = os.path.join("temp_audio", filename)
                    if os.path.isfile(file_path):
                        try:
                            os.remove(file_path)
                            print(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {file_path}")
                        except Exception as e:
                            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_path}: {e}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")

    def _get_queue_status_text(self) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏"""
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ –∏ –≤—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤
        queue_size = self.tasks_queue.qsize()
        total_slots_used = queue_size + (1 if self.is_processing else 0)
        remaining_slots = config.max_queue_size - total_slots_used
        
        if total_slots_used == 0:
            return f"üìã –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ (–¥–æ—Å—Ç—É–ø–Ω–æ {config.max_queue_size} —Å–ª–æ—Ç–æ–≤)"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏
        queue_info = f"üìã –°–ª–æ—Ç—ã –æ—á–µ—Ä–µ–¥–∏: {total_slots_used} –∏–∑ {config.max_queue_size} (—Å–≤–æ–±–æ–¥–Ω–æ: {remaining_slots})"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –∑–∞–¥–∞–Ω–∏–∏ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        current_task_info = ""
        if self.is_processing and self.current_task:
            current_task_info = (
                f"üîÑ –°–µ–π—á–∞—Å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è: –∑–∞–ø—Ä–æ—Å –æ—Ç {self.current_task.update.effective_user.first_name} "
                f"(–¥–æ–±–∞–≤–ª–µ–Ω {self.current_task.created_at.strftime('%H:%M:%S')})\n"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        queue_items = list(self.tasks_queue.queue)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏
        tasks_info = []
        for i, task in enumerate(queue_items, start=1):
            tasks_info.append(
                f"   {i}. ‚è≥ –í –æ—á–µ—Ä–µ–¥–∏: –∑–∞–ø—Ä–æ—Å –æ—Ç {task.update.effective_user.first_name} "
                f"(–¥–æ–±–∞–≤–ª–µ–Ω {task.created_at.strftime('%H:%M:%S')})"
            )
        
        tasks_header = f"üìã –ó–∞–¥–∞–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏ ({len(tasks_info)}):\n" if tasks_info else ""
        tasks_info_str = "\n".join(tasks_info)
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏
        return f"{queue_info}\n{current_task_info}{tasks_header}{tasks_info_str}"

def main():
    # –°–æ–∑–¥–∞–µ–º –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞
    bot_manager = BotManager()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º TTS –º–æ–¥–µ–ª—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–ª—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    bot_manager.initialize_tts()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
    application = Application.builder().token(config.token).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", bot_manager.start_command))
    application.add_handler(CommandHandler("gen", bot_manager.gen_command))
    application.add_handler(CommandHandler("status", bot_manager.status_command))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    application.add_error_handler(bot_manager.error_handler)
    
    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Ñ–∞–π–ª–æ–≤ —Å—Ä–∞–∑—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    bot_manager.cleanup_old_files()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 
    application.run_polling()

if __name__ == "__main__":
    main()
